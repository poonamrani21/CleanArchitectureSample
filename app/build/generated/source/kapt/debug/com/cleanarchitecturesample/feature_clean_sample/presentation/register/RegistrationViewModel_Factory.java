// Generated by Dagger (https://dagger.dev).
package com.cleanarchitecturesample.feature_clean_sample.presentation.register;

import com.cleanarchitecturesample.feature_clean_sample.domain.use_cases.RegisterUseCase;
import com.cleanarchitecturesample.feature_clean_sample.presentation.util.FormValidation;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RegistrationViewModel_Factory implements Factory<RegistrationViewModel> {
  private final Provider<RegisterUseCase> registrationUseCaseProvider;

  private final Provider<FormValidation> formValidationProvider;

  public RegistrationViewModel_Factory(Provider<RegisterUseCase> registrationUseCaseProvider,
      Provider<FormValidation> formValidationProvider) {
    this.registrationUseCaseProvider = registrationUseCaseProvider;
    this.formValidationProvider = formValidationProvider;
  }

  @Override
  public RegistrationViewModel get() {
    return newInstance(registrationUseCaseProvider.get(), formValidationProvider.get());
  }

  public static RegistrationViewModel_Factory create(
      Provider<RegisterUseCase> registrationUseCaseProvider,
      Provider<FormValidation> formValidationProvider) {
    return new RegistrationViewModel_Factory(registrationUseCaseProvider, formValidationProvider);
  }

  public static RegistrationViewModel newInstance(RegisterUseCase registrationUseCase,
      FormValidation formValidation) {
    return new RegistrationViewModel(registrationUseCase, formValidation);
  }
}
