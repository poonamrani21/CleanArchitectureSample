// Generated by Dagger (https://dagger.dev).
package com.cleanarchitecturesample.feature_clean_sample.di;

import com.cleanarchitecturesample.feature_clean_sample.data.api.ApiService;
import com.cleanarchitecturesample.feature_clean_sample.data.database.MyDatabase;
import com.cleanarchitecturesample.feature_clean_sample.domain.repository.RestaurantRepository;
import com.cleanarchitecturesample.feature_clean_sample.presentation.util.NetworkHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRepositoryFactory implements Factory<RestaurantRepository> {
  private final Provider<ApiService> serviceProvider;

  private final Provider<MyDatabase> databaseProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  public AppModule_ProvideRepositoryFactory(Provider<ApiService> serviceProvider,
      Provider<MyDatabase> databaseProvider, Provider<NetworkHelper> networkHelperProvider) {
    this.serviceProvider = serviceProvider;
    this.databaseProvider = databaseProvider;
    this.networkHelperProvider = networkHelperProvider;
  }

  @Override
  public RestaurantRepository get() {
    return provideRepository(serviceProvider.get(), databaseProvider.get(), networkHelperProvider.get());
  }

  public static AppModule_ProvideRepositoryFactory create(Provider<ApiService> serviceProvider,
      Provider<MyDatabase> databaseProvider, Provider<NetworkHelper> networkHelperProvider) {
    return new AppModule_ProvideRepositoryFactory(serviceProvider, databaseProvider, networkHelperProvider);
  }

  public static RestaurantRepository provideRepository(ApiService service, MyDatabase database,
      NetworkHelper networkHelper) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRepository(service, database, networkHelper));
  }
}
