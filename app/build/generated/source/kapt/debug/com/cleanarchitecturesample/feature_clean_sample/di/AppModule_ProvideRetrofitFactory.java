// Generated by Dagger (https://dagger.dev).
package com.cleanarchitecturesample.feature_clean_sample.di;

import com.squareup.moshi.Moshi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final Provider<OkHttpClient> clientProvider;

  private final Provider<String> baseUrlProvider;

  private final Provider<Moshi> moshiProvider;

  public AppModule_ProvideRetrofitFactory(Provider<OkHttpClient> clientProvider,
      Provider<String> baseUrlProvider, Provider<Moshi> moshiProvider) {
    this.clientProvider = clientProvider;
    this.baseUrlProvider = baseUrlProvider;
    this.moshiProvider = moshiProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(clientProvider.get(), baseUrlProvider.get(), moshiProvider.get());
  }

  public static AppModule_ProvideRetrofitFactory create(Provider<OkHttpClient> clientProvider,
      Provider<String> baseUrlProvider, Provider<Moshi> moshiProvider) {
    return new AppModule_ProvideRetrofitFactory(clientProvider, baseUrlProvider, moshiProvider);
  }

  public static Retrofit provideRetrofit(OkHttpClient client, String baseUrl, Moshi moshi) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRetrofit(client, baseUrl, moshi));
  }
}
