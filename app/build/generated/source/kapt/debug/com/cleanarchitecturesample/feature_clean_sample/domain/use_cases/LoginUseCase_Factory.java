// Generated by Dagger (https://dagger.dev).
package com.cleanarchitecturesample.feature_clean_sample.domain.use_cases;

import com.cleanarchitecturesample.feature_clean_sample.domain.repository.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginUseCase_Factory implements Factory<LoginUseCase> {
  private final Provider<UserRepository> repositoryProvider;

  public LoginUseCase_Factory(Provider<UserRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public LoginUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static LoginUseCase_Factory create(Provider<UserRepository> repositoryProvider) {
    return new LoginUseCase_Factory(repositoryProvider);
  }

  public static LoginUseCase newInstance(UserRepository repository) {
    return new LoginUseCase(repository);
  }
}
